head
  title Kanban Board

  style 
    include ../static/style.css
    include ../static/kanban.css

body
  include ./navbar.pug

  if isLoggedIn
    div(class="container")
      div(class="kanban-heading")
        strong(class="kanban-heading-text")="Kanban Board"
        
      form(action="/" method="GET")
        div(class="form-group")
          div(class="row")
            //- BUTTONS THAT DISPLAY ALL APPLICATIONS
            h5(class="ml-4 mt-2") Applications:
              if app_array 
                for app in app_array
                  button(name="app_acronym_btn" class="btn-primary ml-3" value=app.app_acronym style="border-radius: 5%")=app.app_acronym

              //- if selected_app 
              //-   for selected in selected_app 
              //-     button(name="app_acronym_btn" class="btn-primary ml-3" value=selected.task_app_acronym style="border-radius: 5%")=selected.task_app_acronym


          //- START OF KANBAN BOARD
          div(class="kanban-board" style="text-align: center;")
            div#open(class="kanban-block")
              <strong>Open</strong>
                div(class="task-button-block")
                  button(id="task-button" onclick="window.location='/createtask'")="Create task"

                if app_tasks 
                  for task in app_tasks 
                    if task.state === 'open'
                      div(class="task" draggable="true" id=`${task.task_id}`)
                        span=`Task ID: ${task.task_id}`
                        br
                        span=`Description: ${task.description}`

            div(class="kanban-board" style="text-align: center;")
              div#to-do(class="kanban-block")
                <strong>To-do List</strong>
                  div(class="task-button-block")
                    button(id="task-button" onclick="window.location='/updatetask'")="Edit task"
                    
                  if app_tasks 
                    for task in app_tasks 
                      if task.state === 'to-do'
                        div(class="task" draggable="true" id=`${task.task_id}`)
                          span=`Task ID: ${task.task_id}`
                          br
                          span=`Description: ${task.description}`

            div(class="kanban-board" style="text-align: center;")
              div#doing(class="kanban-block")
                <strong>Doing</strong>
                  div(class="task-button-block")
                    button(id="task-button" onclick="window.location='/updatetask'")="Edit task"
                    
                  if app_tasks 
                    for task in app_tasks 
                      if task.state === 'doing'
                        div(class="task" draggable="true" id=`${task.task_id}`)
                          span=`Task ID: ${task.task_id}`
                          br
                          span=`Description: ${task.description}`

            div#done(class="kanban-block")
              <strong>Done</strong>
              div(class="task-button-block")
                button(id="task-button" onclick="window.location='/updatetask'")="Edit Task"

              if app_tasks 
                for task in app_tasks 
                  if task.state === 'done'
                    div(class="task" draggable="true" id=`${task.task_id}`)
                      span=`Task ID: ${task.task_id}`
                      br
                      span=`Description: ${task.description}`

  script.
    const draggables = document.querySelectorAll('.task')
    const containers = document.querySelectorAll('.kanban-block')

    draggables.forEach(draggable => {
      draggable.addEventListener('dragstart', () => {
        draggable.classList.add('dragging')
      })

      draggable.addEventListener('dragend', () => {
        draggable.classList.remove('dragging')
        changeState(draggable, draggable.id);
      })
    })

    containers.forEach(container => {
      container.addEventListener('dragover', e => {
        e.preventDefault()
        const afterElement = getDragAfterElement(container, e.clientY)
        const draggable = document.querySelector('.dragging')
        if (afterElement == null) {
          container.appendChild(draggable)
        } else {
          container.insertBefore(draggable, afterElement)
        }
      })
    })

    function getDragAfterElement(container, y) {
      const draggableElements = [...container.querySelectorAll('.draggable:not(.dragging)')]

      return draggableElements.reduce((closest, child) => {
        const box = child.getBoundingClientRect()
        const offset = y - box.top - box.height / 2
        if (offset < 0 && offset > closest.offset) {
          return { offset: offset, element: child }
        } else {
          return closest
        }
      }, { offset: Number.NEGATIVE_INFINITY }).element
    }

    // save the open state
    async function changeState(element, task_id) {
      //- console.log('container, task_id', container, task_id);
      console.log('parentNode', element.parentNode.id);

      // create state var
      var state = '';

      if (element.parentNode.id === 'open') state = 'open';
      else if (element.parentNode.id === 'to-do') state = 'to-do';
      else if (element.parentNode.id === 'doing') state = 'doing';
      else if (element.parentNode.id === 'done') state = 'done';

      console.log(state);

      var payload = { 
        'state': state,
        'task_id': task_id
      }

      // update
      const updateUrl = 'http://localhost:3000/post/peanut';
      await fetch(updateUrl, {
        method: "Post",
        headers: {
          // send content as json
          "Content-type": "application/json",
        },
        body: JSON.stringify(payload),
      });
    }

  script(src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous")
  script(src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-fQybjgWLrvvRgtW6bFlB7jaZrFsaBXjsOMm/tB9LTS58ONXgqbR9W8oWht/amnpF" crossorigin="anonymous")