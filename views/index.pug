head
  title Kanban Board

  style 
    include ../static/style.css
    include ../static/kanban.css

body
  include ./navbar.pug

  if isLoggedIn
    div(class="container")
      div(class="kanban-heading")
        strong(class="kanban-heading-text")="Kanban Board"

      div(class="kanban-board")
        div#todo(class="kanban-block")
          <strong>To Do</strong>
          div(class="task-button-block")
            button(id="task-button")="Create new task"
          
          div#task1(class="task" draggable="true")
            <span>Task 1</span>
          
          div#task2(class="task" draggable="true")
            <span>Task 2</span>
          
          div#task3(class="task" draggable="true")
            <span>Task 3</span>
          
        div#inprogress(class="kanban-block")
          <strong>In Progress</strong>

        div#done(class="kanban-block")
          <strong>Done</strong>

  script.
    const draggables = document.querySelectorAll('.task')
    const containers = document.querySelectorAll('.kanban-block')

    draggables.forEach(draggable => {
      draggable.addEventListener('dragstart', () => {
        draggable.classList.add('dragging')
      })

      draggable.addEventListener('dragend', () => {
        draggable.classList.remove('dragging')
      })
    })

    containers.forEach(container => {
      container.addEventListener('dragover', e => {
        e.preventDefault()
        const afterElement = getDragAfterElement(container, e.clientY)
        const draggable = document.querySelector('.dragging')
        if (afterElement == null) {
          container.appendChild(draggable)
        } else {
          container.insertBefore(draggable, afterElement)
        }
      })
    })

    function getDragAfterElement(container, y) {
      const draggableElements = [...container.querySelectorAll('.draggable:not(.dragging)')]

      return draggableElements.reduce((closest, child) => {
        const box = child.getBoundingClientRect()
        const offset = y - box.top - box.height / 2
        if (offset < 0 && offset > closest.offset) {
          return { offset: offset, element: child }
        } else {
          return closest
        }
      }, { offset: Number.NEGATIVE_INFINITY }).element
    }

  script(src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous")
  script(src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-fQybjgWLrvvRgtW6bFlB7jaZrFsaBXjsOMm/tB9LTS58ONXgqbR9W8oWht/amnpF" crossorigin="anonymous")